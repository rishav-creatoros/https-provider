"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ethers_1 = require("ethers");
var __1 = require("..");
describe('Crypto', function () {
    it('should encrypt & decrypt', function () {
        var alice = ethers_1.Wallet.createRandom();
        var bob = ethers_1.Wallet.createRandom();
        var data = Buffer.from('{"a":"123","b":123}', 'utf8');
        var ciphertext = (0, __1.encryptData)(ethers_1.utils.arrayify(bob.publicKey), ethers_1.utils.arrayify(alice.privateKey), data);
        var plaintext = (0, __1.decryptData)(ethers_1.utils.arrayify(bob.privateKey), ethers_1.utils.arrayify(alice.publicKey), ciphertext);
        expect(Buffer.from(plaintext)).toEqual(data);
    });
    it('should verify encrypted claims', function () { return __awaiter(void 0, void 0, void 0, function () {
        var alice, bob, witness, timestamp, params, data, sig, proof, encProof, eProof, claim;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    alice = ethers_1.Wallet.createRandom();
                    bob = ethers_1.Wallet.createRandom();
                    witness = ethers_1.Wallet.createRandom();
                    timestamp = Math.floor(Date.now() / 1000);
                    params = "test@gmail.com";
                    data = (0, __1.createSignDataForClaim)({
                        provider: 'google-login',
                        context: '',
                        parameters: params,
                        claimId: 1,
                        timestampS: timestamp,
                        owner: alice.address.toLowerCase()
                    });
                    return [4 /*yield*/, __1.signatures.sign(Buffer.from(data), witness.privateKey)];
                case 1:
                    sig = _b.sent();
                    proof = {
                        parameters: params,
                        signatures: [sig]
                    };
                    encProof = (0, __1.encryptClaimProof)(ethers_1.utils.arrayify(bob.publicKey), ethers_1.utils.arrayify(alice.privateKey), proof);
                    eProof = {
                        id: 1,
                        enc: encProof
                    };
                    _a = {
                        id: 1
                    };
                    return [4 /*yield*/, __1.signatures.getPublicKey(alice.privateKey)];
                case 2:
                    claim = (_a.ownerPublicKey = _b.sent(),
                        _a.provider = 'google-login',
                        _a.redactedParameters = '****@gmail.com',
                        _a.timestampS = timestamp,
                        _a.witnessAddresses = [witness.address.toLowerCase()],
                        _a);
                    (0, __1.verifyEncryptedClaims)([claim], [eProof], ethers_1.utils.arrayify(bob.privateKey));
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=test.crypto.js.map